version: '3.8'

networks:
  safe-rl-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  model_registry:
  logs:

services:
  # ==============================================================================
  # Core Services
  # ==============================================================================
  
  # Main Safe RL API service
  safe-rl-api:
    build:
      context: ..
      dockerfile: deployment/docker/Dockerfile
    image: safe-rl-api:latest
    container_name: safe-rl-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - MODEL_REGISTRY_URL=http://model-registry:5000
      - MONITORING_ENABLED=true
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./config:/app/config:ro
      - logs:/app/logs
      - model_registry:/app/models
    depends_on:
      - postgres
      - redis
      - model-registry
    networks:
      - safe-rl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Policy inference service (for high-throughput inference)
  policy-inference:
    image: safe-rl-api:latest
    container_name: policy-inference
    ports:
      - "8001:8001"
    environment:
      - SERVICE_MODE=inference
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - MODEL_REGISTRY_URL=http://model-registry:5000
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - model_registry:/app/models
    command: ["python", "-m", "safe_rl_human_robot.src.deployment.inference_server", "--port", "8001"]
    depends_on:
      - redis
      - model-registry
    networks:
      - safe-rl-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Safety monitoring service
  safety-monitor:
    image: safe-rl-api:latest
    container_name: safety-monitor
    ports:
      - "8002:8002"
    environment:
      - SERVICE_MODE=safety_monitor
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/app/config:ro
      - logs:/app/logs
    command: ["python", "-m", "safe_rl_human_robot.src.deployment.safety_monitor", "--port", "8002"]
    depends_on:
      - postgres
      - redis
    networks:
      - safe-rl-network
    restart: unless-stopped

  # ==============================================================================
  # Data Services
  # ==============================================================================
  
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=saferl
      - POSTGRES_USER=saferl
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - safe-rl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saferl"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - safe-rl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Model registry service
  model-registry:
    image: mlflow/mlflow:2.7.1
    container_name: model-registry
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - model_registry:/mlflow/artifacts
    command: >
      sh -c "mlflow server 
      --backend-store-uri postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/mlflow 
      --default-artifact-root /mlflow/artifacts 
      --host 0.0.0.0 
      --port 5000"
    depends_on:
      - postgres
    networks:
      - safe-rl-network
    restart: unless-stopped

  # ==============================================================================
  # Monitoring Services
  # ==============================================================================
  
  # Prometheus metrics collector
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - safe-rl-network
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=saferl
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - postgres
      - prometheus
    networks:
      - safe-rl-network
    restart: unless-stopped

  # AlertManager for notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - safe-rl-network
    restart: unless-stopped

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    networks:
      - safe-rl-network
    restart: unless-stopped

  # ==============================================================================
  # Load Balancing & Proxy
  # ==============================================================================
  
  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - safe-rl-api
      - policy-inference
      - grafana
    networks:
      - safe-rl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # Background Services
  # ==============================================================================
  
  # Celery worker for background tasks
  celery-worker:
    image: safe-rl-api:latest
    container_name: celery-worker
    environment:
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - logs:/app/logs
      - model_registry:/app/models
    command: ["celery", "-A", "safe_rl_human_robot.src.deployment.celery_app", "worker", "--loglevel=info"]
    depends_on:
      - postgres
      - redis
    networks:
      - safe-rl-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

  # Celery beat scheduler
  celery-beat:
    image: safe-rl-api:latest
    container_name: celery-beat
    environment:
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - logs:/app/logs
    command: ["celery", "-A", "safe_rl_human_robot.src.deployment.celery_app", "beat", "--loglevel=info"]
    depends_on:
      - postgres
      - redis
    networks:
      - safe-rl-network
    restart: unless-stopped

  # Data backup service
  backup-service:
    image: safe-rl-api:latest
    container_name: backup-service
    environment:
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - postgres_data:/backup/postgres:ro
      - model_registry:/backup/models:ro
      - logs:/backup/logs:ro
    command: ["python", "-m", "safe_rl_human_robot.src.deployment.backup_service"]
    depends_on:
      - postgres
    networks:
      - safe-rl-network
    restart: unless-stopped

  # ==============================================================================
  # Development & Testing Services (optional)
  # ==============================================================================
  
  # Jupyter notebook for development (development profile only)
  jupyter:
    image: safe-rl-api:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - DATABASE_URL=postgresql://saferl:${POSTGRES_PASSWORD}@postgres:5432/saferl
      - REDIS_URL=redis://redis:6379/0
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/app/notebooks
      - ./config:/app/config:ro
      - model_registry:/app/models
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
    depends_on:
      - postgres
      - redis
    networks:
      - safe-rl-network
    profiles: ["dev"]

  # pgAdmin for database management (development profile only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - safe-rl-network
    profiles: ["dev"]