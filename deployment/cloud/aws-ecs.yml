AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS ECS deployment for Safe RL Human-Robot Shared Control System'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for ECS cluster
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ECS services
  
  ClusterName:
    Type: String
    Default: safe-rl-cluster
    Description: Name of the ECS cluster
  
  ImageRepository:
    Type: String
    Description: ECR repository URI for container images
  
  ImageTag:
    Type: String
    Default: latest
    Description: Container image tag
  
  DatabaseEndpoint:
    Type: String
    Description: RDS PostgreSQL endpoint
  
  DatabaseName:
    Type: String
    Default: safe_rl
    Description: Database name
  
  RedisEndpoint:
    Type: String
    Description: ElastiCache Redis endpoint

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 2
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: SafeRL

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ClusterName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-alb-sg'

  # Target Groups
  SafeRLAPITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ClusterName}-api-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  PolicyInferenceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ClusterName}-inference-tg'
      Port: 8001
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  # ALB Listeners
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SafeRLAPITargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref PolicyInferenceTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ['/inference/*']
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
                  - !Sub 'arn:aws:s3:::${S3Bucket}'

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: S3ModelAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3Bucket}/models/*'
                  - !Sub 'arn:aws:s3:::${S3Bucket}'

  # S3 Bucket for model storage
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ClusterName}-models-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudWatch Log Groups
  SafeRLAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ClusterName}/safe-rl-api'
      RetentionInDays: 30

  PolicyInferenceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ClusterName}/policy-inference'
      RetentionInDays: 30

  SafetyMonitorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ClusterName}/safety-monitor'
      RetentionInDays: 30

  # ECS Security Groups
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8001
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/8
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-ecs-sg'

  # Safe RL API Task Definition
  SafeRLAPITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ClusterName}-safe-rl-api'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: safe-rl-api
          Image: !Sub '${ImageRepository}/safe-rl-api:${ImageTag}'
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: DATABASE_HOST
              Value: !Ref DatabaseEndpoint
            - Name: DATABASE_NAME
              Value: !Ref DatabaseName
            - Name: REDIS_HOST
              Value: !Ref RedisEndpoint
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
          Secrets:
            - Name: DATABASE_PASSWORD
              ValueFrom: !Ref DatabaseSecret
            - Name: JWT_SECRET_KEY
              ValueFrom: !Ref JWTSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SafeRLAPILogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command: ['CMD-SHELL', 'curl -f http://localhost:8000/health || exit 1']
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Policy Inference Task Definition
  PolicyInferenceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ClusterName}-policy-inference'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 4096
      Memory: 8192
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: policy-inference
          Image: !Sub '${ImageRepository}/policy-inference:${ImageTag}'
          PortMappings:
            - ContainerPort: 8001
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: MODEL_CACHE_SIZE
              Value: '4GB'
            - Name: INFERENCE_BATCH_SIZE
              Value: '32'
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PolicyInferenceLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command: ['CMD-SHELL', 'curl -f http://localhost:8001/health || exit 1']
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 90

  # Safety Monitor Task Definition
  SafetyMonitorTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ClusterName}-safety-monitor'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: safety-monitor
          Image: !Sub '${ImageRepository}/safety-monitor:${ImageTag}'
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: DATABASE_HOST
              Value: !Ref DatabaseEndpoint
            - Name: DATABASE_NAME
              Value: !Ref DatabaseName
            - Name: REDIS_HOST
              Value: !Ref RedisEndpoint
          Secrets:
            - Name: DATABASE_PASSWORD
              ValueFrom: !Ref DatabaseSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref SafetyMonitorLogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  # ECS Services
  SafeRLAPIService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ClusterName}-safe-rl-api'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref SafeRLAPITaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: safe-rl-api
          ContainerPort: 8000
          TargetGroupArn: !Ref SafeRLAPITargetGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  PolicyInferenceService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ClusterName}-policy-inference'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref PolicyInferenceTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: policy-inference
          ContainerPort: 8001
          TargetGroupArn: !Ref PolicyInferenceTargetGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  SafetyMonitorService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ClusterName}-safety-monitor'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref SafetyMonitorTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      EnableExecuteCommand: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Auto Scaling
  SafeRLAPIAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub 'service/${ECSCluster}/${SafeRLAPIService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-ecs-service'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  SafeRLAPIAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: SafeRLAPIAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SafeRLAPIAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  PolicyInferenceAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 6
      MinCapacity: 2
      ResourceId: !Sub 'service/${ECSCluster}/${PolicyInferenceService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-ecs-service'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  PolicyInferenceAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PolicyInferenceAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref PolicyInferenceAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 600

  # Secrets
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ClusterName}/database/password'
      Description: Database password for Safe RL system
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ClusterName}/jwt/secret'
      Description: JWT secret key for Safe RL system
      GenerateSecretString:
        PasswordLength: 64
        ExcludeCharacters: '"@/\'

  # CloudWatch Alarms
  SafeRLAPIHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ClusterName}-api-high-cpu'
      AlarmDescription: High CPU utilization for Safe RL API
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${ClusterName}-safe-rl-api'
        - Name: ClusterName
          Value: !Ref ECSCluster

  PolicyInferenceHighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ClusterName}-inference-high-latency'
      AlarmDescription: High latency for Policy Inference service
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2.0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt PolicyInferenceTargetGroup.TargetGroupFullName

Outputs:
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSCluster'

  ApplicationLoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  S3Bucket:
    Description: S3 Bucket for model storage
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  SafeRLAPIService:
    Description: Safe RL API Service Name
    Value: !Ref SafeRLAPIService
    Export:
      Name: !Sub '${AWS::StackName}-SafeRLAPI-Service'

  PolicyInferenceService:
    Description: Policy Inference Service Name
    Value: !Ref PolicyInferenceService
    Export:
      Name: !Sub '${AWS::StackName}-PolicyInference-Service'