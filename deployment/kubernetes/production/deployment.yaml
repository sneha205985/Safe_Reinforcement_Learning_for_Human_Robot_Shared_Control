apiVersion: apps/v1
kind: Deployment
metadata:
  name: safe-rl-api
  namespace: safe-rl-production
  labels:
    app.kubernetes.io/name: safe-rl
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: safe-rl
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: safe-rl
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: safe-rl-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: safe-rl-api
        image: ghcr.io/safe-rl/safe-rl:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: redis-url
        - name: MODEL_REGISTRY_URL
          value: "http://model-registry:5000"
        envFrom:
        - configMapRef:
            name: safe-rl-config
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: models
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: safe-rl-config
      - name: models
        persistentVolumeClaim:
          claimName: models-pvc
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-inference
  namespace: safe-rl-production
  labels:
    app.kubernetes.io/name: safe-rl
    app.kubernetes.io/component: inference
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: safe-rl
      app.kubernetes.io/component: inference
  template:
    metadata:
      labels:
        app.kubernetes.io/name: safe-rl
        app.kubernetes.io/component: inference
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: safe-rl-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: policy-inference
        image: ghcr.io/safe-rl/safe-rl:latest
        imagePullPolicy: Always
        command: ["python", "-m", "safe_rl_human_robot.src.deployment.inference_server"]
        args: ["--port", "8001"]
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVICE_MODE
          value: "inference"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: redis-url
        - name: MODEL_REGISTRY_URL
          value: "http://model-registry:5000"
        envFrom:
        - configMapRef:
            name: safe-rl-config
        resources:
          requests:
            cpu: 2000m
            memory: 4Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4000m
            memory: 8Gi
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: models
          mountPath: /app/models
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: models-pvc
      - name: tmp
        emptyDir: {}
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: safety-monitor
  namespace: safe-rl-production
  labels:
    app.kubernetes.io/name: safe-rl
    app.kubernetes.io/component: safety-monitor
    app.kubernetes.io/version: "1.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: safe-rl
      app.kubernetes.io/component: safety-monitor
  template:
    metadata:
      labels:
        app.kubernetes.io/name: safe-rl
        app.kubernetes.io/component: safety-monitor
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: safe-rl-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: safety-monitor
        image: ghcr.io/safe-rl/safe-rl:latest
        imagePullPolicy: Always
        command: ["python", "-m", "safe_rl_human_robot.src.deployment.safety_monitor"]
        args: ["--port", "8002"]
        ports:
        - name: http
          containerPort: 8002
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: SERVICE_MODE
          value: "safety_monitor"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: redis-url
        - name: ALERT_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: safe-rl-secrets
              key: alert-webhook-url
        envFrom:
        - configMapRef:
            name: safe-rl-config
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: safe-rl-production
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/component: proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/component: proxy
    spec:
      containers:
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: tls-secret