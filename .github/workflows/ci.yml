name: Safe RL CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  PYTHON_VERSION: '3.9'
  PYTORCH_VERSION: '2.0.0'
  CUDA_VERSION: '11.8'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==============================================================================
  # STAGE 1: Unit Tests
  # ==============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
        
    - name: Install package in development mode
      run: |
        pip install -e .
        
    - name: Run unit tests with coverage
      run: |
        pytest safe_rl_human_robot/tests/ \
          --cov=safe_rl_human_robot \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junit-xml=test-results.xml \
          -v --tb=short
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

  # ==============================================================================
  # STAGE 2: Integration Tests
  # ==============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safe_rl_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .
        
    - name: Wait for services
      run: |
        sleep 10
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/safe_rl_test
        REDIS_URL: redis://localhost:6379/0
        TEST_ENVIRONMENT: ci
      run: |
        pytest safe_rl_human_robot/tests/integration/ \
          --junit-xml=integration-test-results.xml \
          -v --tb=short
          
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: integration-test-results.xml

  # ==============================================================================
  # STAGE 3: Safety Validation
  # ==============================================================================
  safety-validation:
    name: Safety Constraint Verification
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run safety constraint validation
      run: |
        python -m safe_rl_human_robot.src.testing.safety_validation \
          --config config/environments/test.yaml \
          --output safety-validation-report.json \
          --strict
          
    - name: Verify safety metrics
      run: |
        python scripts/verify_safety_metrics.py \
          --report safety-validation-report.json \
          --max-violations 0 \
          --min-constraint-satisfaction 0.99
          
    - name: Upload safety validation report
      uses: actions/upload-artifact@v3
      with:
        name: safety-validation-report
        path: safety-validation-report.json

  # ==============================================================================
  # STAGE 4: Performance Benchmarks
  # ==============================================================================
  performance-benchmarks:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run performance benchmarks
      run: |
        python -m safe_rl_human_robot.src.testing.performance_benchmarks \
          --config config/environments/test.yaml \
          --output performance-report.json \
          --baseline performance_baselines.json
          
    - name: Check performance regression
      run: |
        python scripts/check_performance_regression.py \
          --current performance-report.json \
          --baseline performance_baselines.json \
          --max-regression 0.05
          
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: |
          performance-report.json
          performance_baselines.json

  # ==============================================================================
  # STAGE 5: Security Scanning
  # ==============================================================================
  security-scanning:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt
        
    - name: Run safety check (dependency vulnerabilities)
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run bandit (code security analysis)
      run: |
        bandit -r safe_rl_human_robot/ \
          -f json -o bandit-report.json \
          -x safe_rl_human_robot/tests/ || true
          
    - name: Run semgrep (static analysis)
      run: |
        semgrep --config=auto --json --output semgrep-report.json safe_rl_human_robot/ || true
        
    - name: Process security reports
      run: |
        python scripts/process_security_reports.py \
          --safety safety-report.json \
          --bandit bandit-report.json \
          --semgrep semgrep-report.json \
          --output security-summary.json
          
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
          security-summary.json

  # ==============================================================================
  # STAGE 6: Documentation Build
  # ==============================================================================
  documentation-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install -r requirements.txt
        pip install -e .
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Check documentation coverage
      run: |
        sphinx-build -b coverage docs docs/_build/coverage
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # ==============================================================================
  # STAGE 7: Docker Build and Push
  # ==============================================================================
  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [integration-tests, safety-validation, security-scanning]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ==============================================================================
  # STAGE 8: Deployment to Staging
  # ==============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, performance-benchmarks]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.saferl.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name safe-rl-staging --region us-west-2
        
    - name: Deploy to staging
      run: |
        kubectl apply -f deployment/kubernetes/staging/
        kubectl set image deployment/safe-rl-api \
          safe-rl-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/safe-rl-api --timeout=600s
        
    - name: Run smoke tests
      run: |
        python scripts/smoke_tests.py --environment staging
        
    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==============================================================================
  # STAGE 9: Production Deployment (Manual Approval)
  # ==============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://saferl.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-west-2
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name safe-rl-production --region us-west-2
        
    - name: Deploy to production with canary
      run: |
        # Deploy canary (10% traffic)
        kubectl apply -f deployment/kubernetes/production/canary/
        kubectl set image deployment/safe-rl-api-canary \
          safe-rl-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/safe-rl-api-canary --timeout=600s
        
        # Wait for canary validation
        sleep 300
        
        # Full deployment if canary is healthy
        kubectl apply -f deployment/kubernetes/production/
        kubectl set image deployment/safe-rl-api \
          safe-rl-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/safe-rl-api --timeout=600s
        
    - name: Run production smoke tests
      run: |
        python scripts/smoke_tests.py --environment production
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          SHA: ${{ github.sha }}
          
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==============================================================================
  # STAGE 10: Post-Deployment Validation
  # ==============================================================================
  post-deployment-validation:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run comprehensive validation
      run: |
        python scripts/post_deployment_validation.py \
          --environment production \
          --duration 300 \
          --output validation-report.json
          
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: post-deployment-validation
        path: validation-report.json